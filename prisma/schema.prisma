// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  otp           String?
  otpExpires    DateTime?
  isEmailVerified Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  habits        Habit[]
  completions   Completion[]
  badges        Badge[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Habit {
  id          String   @id @default(cuid())
  name        String
  description String?
  frequency   String   @default("daily") // daily, weekly, monthly
  color       String   @default("#3b82f6")
  icon        String   @default("ðŸŽ¯")
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  completions Completion[]
  streaks     Streak[]
}

model Completion {
  id        String   @id @default(cuid())
  date      DateTime
  createdAt DateTime @default(now())
  habitId   String
  userId    String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
}

model Streak {
  id           String   @id @default(cuid())
  habitId      String
  currentCount Int      @default(0)
  longestCount Int      @default(0)
  lastUpdated  DateTime @default(now())
  habit        Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  unlockedAt  DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  emailReminders    Boolean  @default(false)
  reminderTime      String   @default("09:00")
  timezone          String   @default("UTC")
  theme             String   @default("system") // light, dark, system
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 